Description: Undocumented changes
 This patch contains undocumented changes accumulated during previous
 versions of the Ubuntu plymouth package, that have not yet been split up
 into individually-documented patches.  Please try not to add further things
 to this patch.  Using quilt for new changes is recommended, but if you
 don't, they'll end up in a separate debian-changes patch at the end of the
 patch series.
Last-Update: 2011-01-21

--- a/src/main.c
+++ b/src/main.c
@@ -122,6 +122,7 @@
   const char *default_tty;
 
   int number_of_errors;
+  ply_list_t *pending_messages;
 } state_t;
 
 static ply_boot_splash_t *start_boot_splash (state_t    *state,
@@ -174,8 +175,9 @@
            const char  *status)
 {
   ply_trace ("updating status to '%s'", status);
-  ply_progress_status_update (state->progress,
-                               status);
+  if (strncmp (status, "fsck:", 5))
+    ply_progress_status_update (state->progress,
+                                status);
   if (state->boot_splash != NULL)
     ply_boot_splash_update_status (state->boot_splash,
                                    status);
@@ -227,6 +229,25 @@
 }
 
 static void
+flush_pending_messages (state_t *state)
+{
+  ply_list_node_t *node = ply_list_get_first_node (state->pending_messages);
+  while (node != NULL)
+    {
+      ply_list_node_t *next_node;
+      char *message = ply_list_node_get_data (node);
+
+      ply_trace ("displaying queued message");
+
+      ply_boot_splash_display_message (state->boot_splash, message);
+      next_node = ply_list_get_next_node (state->pending_messages, node);
+      ply_list_remove_node (state->pending_messages, node);
+      free(message);
+      node = next_node;
+    }
+}
+
+static void
 show_messages (state_t *state)
 {
   if (state->boot_splash == NULL)
@@ -435,7 +456,7 @@
       ply_trace ("Could not start default splash screen,"
                  "showing text splash screen");
       state->boot_splash = start_boot_splash (state,
-                                              PLYMOUTH_THEME_PATH "text/text.plymouth",
+                                              PLYMOUTH_THEME_PATH "text.plymouth",
                                               false);
     }
 
@@ -444,12 +465,15 @@
       ply_trace ("Could not start text splash screen,"
                  "showing built-in fallback");
       state->boot_splash = start_boot_splash (state,
-                                              PLYMOUTH_THEME_PATH "text/text.plymouth",
+                                              PLYMOUTH_THEME_PATH "text.plymouth",
                                               true);
     }
 
   if (state->boot_splash == NULL)
-    ply_error ("plymouthd: could not start boot splash: %m");
+    {
+      if (errno != ENOENT)
+        ply_error ("plymouthd: could not start boot splash: %m");
+    }
 }
 
 static void
@@ -503,8 +527,10 @@
         ply_boot_splash_display_message (state->boot_splash, message);
     }
   else
-    ply_trace ("not displaying message %s as no splash", message);
-  ply_list_append_data (state->messages, strdup(message));
+    {
+        ply_trace ("not displaying message %s as no splash", message);
+        ply_list_append_data (state->messages, strdup(message));
+    }
 }
 
 static void
@@ -721,6 +747,7 @@
       if (state->number_of_errors > 0)
         spool_error (state);
     }
+  flush_pending_messages (state);
 }
 
 static void
@@ -1506,6 +1533,10 @@
   ply_text_display_t *display;
   ply_keyboard_t *keyboard;
 
+  // urgh
+  if (!ply_terminal_open (state->terminal))
+    return;
+
   keyboard = ply_keyboard_new_for_terminal (terminal);
   display = ply_text_display_new (terminal);
 
@@ -2209,6 +2240,7 @@
   state->entry_buffer = ply_buffer_new();
   state->pixel_displays = ply_list_new ();
   state->text_displays = ply_list_new ();
+  state->pending_messages = ply_list_new ();
   state->messages = ply_list_new ();
   state->keyboard = NULL;
 
--- a/src/plugins/splash/script/script-lib-image.c
+++ b/src/plugins/splash/script/script-lib-image.c
@@ -173,7 +173,7 @@
 
   alpha_obj = script_obj_hash_peek_element (state->local, "alpha");
 
-  if (script_obj_is_number (alpha_obj))
+  if (alpha_obj && script_obj_is_number (alpha_obj))
     {
       alpha = CLAMP(script_obj_as_number (alpha_obj), 0, 1);
     }
--- a/src/plugins/splash/script/script-lib-sprite.c
+++ b/src/plugins/splash/script/script-lib-sprite.c
@@ -399,6 +399,45 @@
   return script_return_obj_null ();
 }
 
+static script_return_t sprite_window_get_bits_per_pixel (script_state_t *state,
+                                                         void           *user_data)
+{
+  script_lib_sprite_data_t *data = user_data;
+  ply_list_node_t *node;
+  int index;
+  script_obj_t *index_obj;
+  script_lib_display_t *display;
+  unsigned int bits_per_pixel;
+
+  index_obj = script_obj_hash_peek_element (state->local, "window");
+
+  if (index_obj)
+    {
+      index = script_obj_as_number (index_obj);
+      script_obj_unref(index_obj);
+      if (index < 0)
+        return script_return_obj_null ();
+      node = ply_list_get_nth_node (data->displays, index);
+      if (node == NULL)
+        return script_return_obj_null ();
+      display = ply_list_node_get_data (node);
+      bits_per_pixel = ply_pixel_display_get_bits_per_pixel (display->pixel_display);
+      return script_return_obj (script_obj_new_number (bits_per_pixel));
+    }
+
+  bits_per_pixel = 0;
+  for (node = ply_list_get_first_node (data->displays);
+       node;
+       node = ply_list_get_next_node (data->displays, node))
+    {
+      display = ply_list_node_get_data (node);
+      bits_per_pixel = ply_pixel_display_get_bits_per_pixel (display->pixel_display);
+      if (bits_per_pixel)
+        break;
+    }
+  return script_return_obj (script_obj_new_number (bits_per_pixel));
+}
+
 static uint32_t extract_rgb_color (script_state_t *state)
 {
   uint8_t red =   CLAMP (255 * script_obj_hash_get_number (state->local, "red"),   0, 255);
@@ -649,6 +688,12 @@
                               "value",
                               NULL);
   script_add_native_function (window_hash,
+                              "GetBitsPerPixel",
+                              sprite_window_get_bits_per_pixel,
+                              data,
+                              "window",
+                              NULL);
+  script_add_native_function (window_hash,
                               "SetBackgroundTopColor",
                               sprite_window_set_background_top_color,
                               data,
--- a/src/plugins/splash/script/plugin.c
+++ b/src/plugins/splash/script/plugin.c
@@ -467,6 +467,8 @@
 become_idle (ply_boot_splash_plugin_t *plugin,
              ply_trigger_t            *idle_trigger)
 {
+  stop_animation (plugin);
+
   ply_trigger_pull (idle_trigger, NULL);
 }
 
--- a/src/plugins/splash/text/plugin.c
+++ b/src/plugins/splash/text/plugin.c
@@ -481,7 +481,10 @@
 
   terminal = ply_text_display_get_terminal (view->display);
   if (ply_terminal_open (terminal))
-    ply_terminal_activate_vt (terminal);
+    {
+      ply_terminal_set_mode (terminal, PLY_TERMINAL_MODE_TEXT);
+      ply_terminal_activate_vt (terminal);
+    }
 
   ply_text_display_set_draw_handler (view->display,
                                      (ply_text_display_draw_handler_t)
--- a/src/libply-splash-core/ply-pixel-display.h
+++ b/src/libply-splash-core/ply-pixel-display.h
@@ -48,6 +48,7 @@
 
 unsigned long ply_pixel_display_get_width  (ply_pixel_display_t *display);
 unsigned long ply_pixel_display_get_height (ply_pixel_display_t *display);
+unsigned int ply_pixel_display_get_bits_per_pixel (ply_pixel_display_t *display);
 
 void ply_pixel_display_set_draw_handler (ply_pixel_display_t              *display,
                                          ply_pixel_display_draw_handler_t  draw_handler,
--- a/src/libply-splash-core/ply-renderer.c
+++ b/src/libply-splash-core/ply-renderer.c
@@ -328,6 +328,21 @@
                                                           head);
 }
 
+unsigned int
+ply_renderer_get_bits_per_pixel_for_head (ply_renderer_t      *renderer,
+                                          ply_renderer_head_t *head)
+{
+  assert (renderer != NULL);
+  assert (renderer->plugin_interface != NULL);
+  assert (head != NULL);
+
+  if (!renderer->plugin_interface->get_bits_per_pixel_for_head)
+    return 0;
+
+  return renderer->plugin_interface->get_bits_per_pixel_for_head (renderer->backend,
+                                                                  head);
+}
+
 void
 ply_renderer_flush_head (ply_renderer_t      *renderer,
                          ply_renderer_head_t *head)
--- a/src/libply-splash-core/ply-renderer.h
+++ b/src/libply-splash-core/ply-renderer.h
@@ -51,6 +51,8 @@
 ply_list_t *ply_renderer_get_heads (ply_renderer_t *renderer);
 ply_pixel_buffer_t *ply_renderer_get_buffer_for_head (ply_renderer_t      *renderer,
                                                       ply_renderer_head_t *head);
+unsigned int ply_renderer_get_bits_per_pixel_for_head (ply_renderer_t      *renderer,
+                                                       ply_renderer_head_t *head);
 
 void ply_renderer_flush_head (ply_renderer_t      *renderer,
                               ply_renderer_head_t *head);
--- a/src/libply-splash-core/ply-pixel-display.c
+++ b/src/libply-splash-core/ply-pixel-display.c
@@ -51,6 +51,7 @@
 
   unsigned long width;
   unsigned long height;
+  unsigned int bits_per_pixel;
 
   ply_pixel_display_draw_handler_t draw_handler;
   void *draw_handler_user_data;
@@ -79,6 +80,9 @@
   display->width = size.width;
   display->height = size.height;
 
+  display->bits_per_pixel = ply_renderer_get_bits_per_pixel_for_head (renderer,
+                                                                      head);
+
   return display;
 }
 
@@ -94,6 +98,12 @@
   return display->height;
 }
 
+unsigned int
+ply_pixel_display_get_bits_per_pixel (ply_pixel_display_t *display)
+{
+  return display->bits_per_pixel;
+}
+
 static void
 ply_pixel_display_flush (ply_pixel_display_t *display)
 {
--- a/src/libply-splash-core/ply-renderer-plugin.h
+++ b/src/libply-splash-core/ply-renderer-plugin.h
@@ -54,6 +54,8 @@
 
   ply_pixel_buffer_t * (* get_buffer_for_head) (ply_renderer_backend_t *backend,
                                                 ply_renderer_head_t    *head);
+  unsigned int (* get_bits_per_pixel_for_head) (ply_renderer_backend_t *backend,
+                                                ply_renderer_head_t    *head);
 
   ply_renderer_input_source_t * (* get_input_source) (ply_renderer_backend_t *backend);
   bool                 (* open_input_source) (ply_renderer_backend_t *backend,
--- a/src/client/ply-boot-client.c
+++ b/src/client/ply-boot-client.c
@@ -269,15 +269,32 @@
       return;
     }
 
-  request_node = ply_list_get_first_node (client->requests_waiting_for_replies);
-  assert (request_node != NULL);
-
-  request = (ply_boot_client_request_t *) ply_list_node_get_data (request_node);
-  assert (request != NULL);
-
   if (!ply_read (client->socket_fd, byte, sizeof (uint8_t)))
     goto out;
 
+  for (request_node = ply_list_get_first_node (client->requests_waiting_for_replies);
+       request_node; request_node = ply_list_get_next_node (client->requests_waiting_for_replies, request_node))
+    {
+      assert (request_node != NULL);
+      request = (ply_boot_client_request_t *) ply_list_node_get_data (request_node);
+      assert (request != NULL);
+
+      if (! strcmp (request->command, PLY_BOOT_PROTOCOL_REQUEST_TYPE_PASSWORD)
+          || ! strcmp (request->command, PLY_BOOT_PROTOCOL_REQUEST_TYPE_QUESTION)
+          || ! strcmp (request->command, PLY_BOOT_PROTOCOL_REQUEST_TYPE_KEYSTROKE))
+        {
+          if (! memcmp (byte, PLY_BOOT_PROTOCOL_RESPONSE_TYPE_ANSWER, sizeof (uint8_t))
+              || ! memcmp (byte, PLY_BOOT_PROTOCOL_RESPONSE_TYPE_NO_ANSWER, sizeof (uint8_t)))
+            break;
+        }
+      else
+        {
+          if (memcmp (byte, PLY_BOOT_PROTOCOL_RESPONSE_TYPE_ANSWER, sizeof (uint8_t))
+              && memcmp (byte, PLY_BOOT_PROTOCOL_RESPONSE_TYPE_NO_ANSWER, sizeof (uint8_t)))
+            break;
+        }
+    }
+
   if (memcmp (byte, PLY_BOOT_PROTOCOL_RESPONSE_TYPE_ACK, sizeof (uint8_t)) == 0)
     {
       if (request->handler != NULL)
--- a/src/plugins/renderers/frame-buffer/plugin.c
+++ b/src/plugins/renderers/frame-buffer/plugin.c
@@ -644,6 +644,16 @@
   return backend->head.pixel_buffer;
 }
 
+static unsigned int
+get_bits_per_pixel_for_head (ply_renderer_backend_t *backend,
+                             ply_renderer_head_t    *head)
+{
+  if (head != &backend->head)
+    return 0;
+
+  return backend->bytes_per_pixel * 8;
+}
+
 static bool
 has_input_source (ply_renderer_backend_t      *backend,
                   ply_renderer_input_source_t *input_source)
@@ -737,6 +747,7 @@
       .flush_head = flush_head,
       .get_heads = get_heads,
       .get_buffer_for_head = get_buffer_for_head,
+      .get_bits_per_pixel_for_head = get_bits_per_pixel_for_head,
       .get_input_source = get_input_source,
       .open_input_source = open_input_source,
       .set_handler_for_input_source = set_handler_for_input_source,
